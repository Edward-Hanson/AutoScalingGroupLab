AWSTemplateFormatVersion: '2010-09-09'
Description: Highly-available web tier with ALB, ASG and CPU stress-test button

Parameters:
  LatestAmazonLinuxAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  # ──────────────────────────── IAM ────────────────────────────
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: { Service: [ ec2.amazonaws.com ] }
          Action: [ 'sts:AssumeRole' ]
      Path: /
      Policies:
      - PolicyName: S3AccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: [ 's3:GetObject' ]
            Resource: [ 'arn:aws:s3:::hanson-scripts/*' ]

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref InstanceRole ]

  # ──────────────────────────── VPC & subnets ────────────────────────────
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [ { Key: Name, Value: AutoScalingLabVPC } ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: [ { Key: Name, Value: AutoScalingLabIGW } ]

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags: [ { Key: Name, Value: PublicSubnet1 } ]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags: [ { Key: Name, Value: PublicSubnet2 } ]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags: [ { Key: Name, Value: PrivateSubnet1 } ]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags: [ { Key: Name, Value: PrivateSubnet2 } ]

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
    DependsOn: VPCGatewayAttachment

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [ { Key: Name, Value: PublicRouteTable } ]

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [ { Key: Name, Value: PrivateRouteTable } ]

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # ──────────────────────────── Security groups ────────────────────────────
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound HTTP from Internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 10.0.0.0/16

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP only from ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0

  # ──────────────────────────── ALB ────────────────────────────
  WebServerLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]
      SecurityGroups: [ !Ref LoadBalancerSecurityGroup ]
      Type: application

  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher: { HttpCode: "200" }

  WebServerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebServerTargetGroup
      LoadBalancerArn: !Ref WebServerLoadBalancer
      Port: 80
      Protocol: HTTP

  # ──────────────────────────── Launch template ────────────────────────────
  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-LaunchTemplate"
      LaunchTemplateData:
        ImageId: !Ref LatestAmazonLinuxAMI
        InstanceType: t2.micro
        SecurityGroupIds: [ !Ref WebServerSecurityGroup ]
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        Monitoring:
          Enabled: true
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log) 2>&1
            echo "STARTING USERDATA @ $(date)"

            # ── 1. Prepare stress-ng ──────────────────────────────────────
            amazon-linux-extras install -y epel
            yum install -y stress-ng

            # Allow 'apache' to launch stress-ng as root & kill it
            echo 'apache ALL=(root) NOPASSWD: /usr/bin/stress-ng' \
              > /etc/sudoers.d/apache-stress
            chmod 440 /etc/sudoers.d/apache-stress

            # Simplest path: turn SELinux off (or toggle httpd_execmem on)
            setenforce 0 || true

            # ── 2. System updates & httpd ────────────────────────────────
            yum update -y
            yum install -y httpd awscli
            systemctl enable --now httpd

            # ── 3. Pull and execute the app bootstrap script ────────────
            if aws s3 cp s3://hanson-scripts/autoscalingScript.sh \
                    /tmp/autoscalingScript.sh ; then
              chmod +x /tmp/autoscalingScript.sh
              /tmp/autoscalingScript.sh || { echo BOOTSTRAP_FAIL; exit 1; }
            else
              echo S3_DOWNLOAD_FAIL ; exit 1
            fi

            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --resource WebServerAutoScalingGroup \
              --region ${AWS::Region}

  # ──────────────────────────── Auto Scaling ────────────────────────────
  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      VPCZoneIdentifier: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
      TargetGroupARNs: [ !Ref WebServerTargetGroup ]
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300

  # ──────────────────────────── Scaling policies & alarms ────────────────
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: 60

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: 300

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-out when CPU > 50 %
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
      - { Name: AutoScalingGroupName, Value: !Ref WebServerAutoScalingGroup }
      Statistic: Average
      Period: 20
      EvaluationPeriods: 1
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      AlarmActions: [ !Ref ScaleUpPolicy ]

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-in when CPU < 30 %
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
      - { Name: AutoScalingGroupName, Value: !Ref WebServerAutoScalingGroup }
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 30
      ComparisonOperator: LessThanThreshold
      AlarmActions: [ !Ref ScaleDownPolicy ]
